@model CaloriesCount.Models.Food

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Food</h4>
    <hr />

    <img src="@(Url.Content(Constants.FoodImagePath) + Model.ImageFileName)" class="img-responsive" />

    <div class="row">

        <div class="col-xs-12 col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Food Description</h3>
                </div>
                <div class="panel-body">
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Category.Name)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Category.Name)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Name)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Name)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Calories)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Calories)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Fat)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Fat)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Protein)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Protein)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Carbohydrates)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Carbohydrates)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Fibre)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Fibre)
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-xs-12 col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Macronutrient content per 100g</h3>
                </div>
                <div class="panel-body">
                    <canvas id="MacroChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

@section Scripts
{
    <!-- Add ChartJS by CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js" integrity="sha512-QSkVNOCYLtj73J4hbmVoOV6KVZuMluZlioC+trLpewV8qMjsWqlIQvkn1KGX2StWvPMdWGBqim1xlC8krl1EKQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- Generate the macronutrient doughnut chart-->
    <script type="text/javascript">

        // Get chart canvas
        const ctx = document.getElementById("MacroChart");

        // Set the data
        const data = {
            labels: [
                'Protein',
                'Carbohydrates',
                'Fats'
            ],
            datasets: [{
                label: 'Macronutrient dataset',
                data: [@Model.Protein, @Model.Carbohydrates, @Model.Fat],
                backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)'
                ],
                hoverOffset: 4
            }]
        };

        // Add gram unit to item value on hover
        const options = {
            plugins: {
                tooltip: {
                    callbacks: {
                        label: (ttItem) => (`${ttItem.label}: ${ttItem.parsed} g`)
                    }
                }
            }
        }

        const config = {
            type: 'doughnut',
            data: data,
            options: options
        };

        var macroChart = new Chart(ctx, config );

    </script>
}